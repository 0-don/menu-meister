generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                       = "node node_modules/prisma-nestjs-graphql"
  output                         = "../src/app_modules/@generated"
  // noAtomicOperations             = true
  graphqlScalars_Bytes_name      = "GraphQLUpload"
  graphqlScalars_Bytes_specifier = "graphql-upload-minimal"
  noTypeId                       = true
}

model Token {
  id Int @id @default(autoincrement())

  token     String   @unique @db.VarChar(255)
  expiresIn DateTime

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedToken", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedToken", fields: [updatedBy], references: [id])
}

model User {
  id Int @id @default(autoincrement())

  image    String? @db.Text
  /// @HideField({ output: true, input: true })
  password String
  username String  @unique
  email    String  @unique

  lastOnline DateTime @default(now())
  status     Boolean  @default(true)

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int?
  /// @HideField({ output: false, input: true })
  updatedBy     Int?
  /// @HideField({ output: false, input: true })
  createdByUser User?    @relation("CreatedUser", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User?    @relation("UpdatedUser", fields: [updatedBy], references: [id])

  createdToken     Token[]    @relation("CreatedToken")
  updatedToken     Token[]    @relation("UpdatedToken")
  createdUser      User[]     @relation("CreatedUser")
  updatedUser      User[]     @relation("UpdatedUser")
  createdUserRoles UserRole[] @relation("CreatedUserRole")
  updatedUserRoles UserRole[] @relation("UpdatedUserRole")

  createdNutritions       Ingredient[]      @relation("CreatedIngredient")
  updatedIngredients      Ingredient[]      @relation("UpdatedIngredient")
  createdMeals            Meal[]            @relation("CreatedMeal")
  updatedMeals            Meal[]            @relation("UpdatedMeal")
  createdWeeklyMealGroups WeeklyMealGroup[] @relation("CreatedWeeklyMealGroup")
  updatedWeeklyMealGroups WeeklyMealGroup[] @relation("UpdatedWeeklyMealGroup")
  createdMealBoardPlans   MealBoardPlan[]   @relation("CreatedMealBoardPlan")
  updatedMealBoardPlans   MealBoardPlan[]   @relation("UpdatedMealBoardPlan")
  UserRole                UserRole[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  energyKcal      Decimal @db.Decimal(10, 2)
  energyKj        Decimal @db.Decimal(10, 2)
  breadUnits      Decimal @db.Decimal(10, 2)
  carbohydrates   Decimal @db.Decimal(10, 2)
  sugars          Decimal @db.Decimal(10, 2)
  salt            Decimal @db.Decimal(10, 2)
  fats            Decimal @db.Decimal(10, 2)
  saturatedFats   Decimal @db.Decimal(10, 2)
  unsaturatedFats Decimal @db.Decimal(10, 2)
  protein         Decimal @db.Decimal(10, 2)

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedIngredient", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedIngredient", fields: [updatedBy], references: [id])
}

model UserRole {
  id     Int          @id @default(autoincrement())
  userId Int
  name   UserRoleName

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedUserRole", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedUserRole", fields: [updatedBy], references: [id])

  User User @relation(fields: [userId], references: [id])

  @@unique([userId, name], name: "user_role_userId_name_unique")
}

model Meal {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  imageName   String? @db.VarChar(255)
  image       String? @db.Text

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedMeal", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedMeal", fields: [updatedBy], references: [id])

  mondayMealGroups    WeeklyMealGroup[] @relation("MondayMeal")
  tuesdayMealGroups   WeeklyMealGroup[] @relation("TuesdayMeal")
  wednesdayMealGroups WeeklyMealGroup[] @relation("WednesdayMeal")
  thursdayMealGroups  WeeklyMealGroup[] @relation("ThursdayMeal")
  fridayMealGroups    WeeklyMealGroup[] @relation("FridayMeal")
  saturdayMealGroups  WeeklyMealGroup[] @relation("SaturdayMeal")
  sundayMealGroups    WeeklyMealGroup[] @relation("SundayMeal")
}

model MealBoardPlan {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  color           String?           @db.VarChar(7)
  WeeklyMealGroup WeeklyMealGroup[]

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedMealBoardPlan", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedMealBoardPlan", fields: [updatedBy], references: [id])
}

model WeeklyMealGroup {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  color       String? @db.VarChar(7)
  description String? @db.Text
  year        Int
  weekOfYear  Int // ISO week numbers
  orderIndex  Int // To manage the vertical order of groups

  mealBoardPlanId Int

  mealBoardPlan MealBoardPlan @relation(fields: [mealBoardPlanId], references: [id])

  mondayMealId    Int?
  tuesdayMealId   Int?
  wednesdayMealId Int?
  thursdayMealId  Int?
  fridayMealId    Int?
  saturdayMealId  Int?
  sundayMealId    Int?

  mondayMeal    Meal? @relation("MondayMeal", fields: [mondayMealId], references: [id])
  tuesdayMeal   Meal? @relation("TuesdayMeal", fields: [tuesdayMealId], references: [id])
  wednesdayMeal Meal? @relation("WednesdayMeal", fields: [wednesdayMealId], references: [id])
  thursdayMeal  Meal? @relation("ThursdayMeal", fields: [thursdayMealId], references: [id])
  fridayMeal    Meal? @relation("FridayMeal", fields: [fridayMealId], references: [id])
  saturdayMeal  Meal? @relation("SaturdayMeal", fields: [saturdayMealId], references: [id])
  sundayMeal    Meal? @relation("SundayMeal", fields: [sundayMealId], references: [id])

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedWeeklyMealGroup", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedWeeklyMealGroup", fields: [updatedBy], references: [id])
}

enum UserRoleName {
  ADMIN
  MOD
  USER
  GUEST
}
