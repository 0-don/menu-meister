generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                       = "node node_modules/prisma-nestjs-graphql"
  output                         = "../src/app_modules/@generated"
  // noAtomicOperations             = true
  graphqlScalars_Bytes_name      = "GraphQLUpload"
  graphqlScalars_Bytes_specifier = "graphql-upload-minimal"
  noTypeId                       = true
}

model Token {
  id Int @id @default(autoincrement())

  token     String   @unique @db.VarChar(255)
  expiresIn DateTime

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedToken", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedToken", fields: [updatedBy], references: [id])
}

model Settings {
  id Int @id @default(autoincrement())

  maxEditOrderDays Int

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedSettings", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedSettings", fields: [updatedBy], references: [id])
}

model User {
  id Int @id @default(autoincrement())

  firstname String?
  lastname  String?

  image    String? @db.Text
  /// @HideField({ output: true, input: true })
  password String
  username String  @unique
  email    String  @unique

  lastOnline DateTime @default(now())
  status     Boolean  @default(true)

  allergens Allergens[] @relation("UserAllergens")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int?
  /// @HideField({ output: false, input: true })
  updatedBy     Int?
  /// @HideField({ output: false, input: true })
  createdByUser User?    @relation("CreatedUser", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User?    @relation("UpdatedUser", fields: [updatedBy], references: [id])

  createdToken     Token[]    @relation("CreatedToken")
  updatedToken     Token[]    @relation("UpdatedToken")
  createdUser      User[]     @relation("CreatedUser")
  updatedUser      User[]     @relation("UpdatedUser")
  createdUserRoles UserRole[] @relation("CreatedUserRole")
  updatedUserRoles UserRole[] @relation("UpdatedUserRole")
  createdUserMeals UserMeal[] @relation("CreatedUserMeal")
  updatedUserMeals UserMeal[] @relation("UpdatedUserMeal")
  createdSettings  Settings[] @relation("CreatedSettings")
  updatedSettings  Settings[] @relation("UpdatedSettings")

  createdIngredients       Ingredient[]       @relation("CreatedIngredient")
  updatedIngredients       Ingredient[]       @relation("UpdatedIngredient")
  createdRecipes           Recipe[]           @relation("CreatedRecipe")
  updatedRecipes           Recipe[]           @relation("UpdatedRecipe")
  createdRecipeIngredients RecipeIngredient[] @relation("CreatedRecipeIngredient")
  updatedRecipeIngredients RecipeIngredient[] @relation("UpdatedRecipeIngredient")
  createdMeals             Meal[]             @relation("CreatedMeal")
  updatedMeals             Meal[]             @relation("UpdatedMeal")
  createdMealRecipes       MealRecipe[]       @relation("CreatedMealRecipe")
  updatedMealRecipes       MealRecipe[]       @relation("UpdatedMealRecipe")

  createdWeeklyMealGroups WeeklyMealGroup[] @relation("CreatedWeeklyMealGroup")
  updatedWeeklyMealGroups WeeklyMealGroup[] @relation("UpdatedWeeklyMealGroup")
  createdMealBoardPlans   MealBoardPlan[]   @relation("CreatedMealBoardPlan")
  updatedMealBoardPlans   MealBoardPlan[]   @relation("UpdatedMealBoardPlan")

  createdAllergens  Allergens[]  @relation("CreatedAllergens")
  updatedAllergens  Allergens[]  @relation("UpdatedAllergens")
  createdAdditives  Additives[]  @relation("CreatedAdditives")
  updatedAdditives  Additives[]  @relation("UpdatedAdditives")
  createdProperties Properties[] @relation("CreatedProperties")
  updatedProperties Properties[] @relation("UpdatedProperties")
  createdCategories Categories[] @relation("CreatedCategories")
  updatedCategories Categories[] @relation("UpdatedCategories")
  createdSeasons    Seasons[]    @relation("CreatedSeasons")
  updatedSeasons    Seasons[]    @relation("UpdatedSeasons")
  createdFoodForms  FoodForms[]  @relation("CreatedFoodForms")
  updatedFoodForms  FoodForms[]  @relation("UpdatedFoodForms")
  createdKitchens   Kitchens[]   @relation("CreatedKitchens")
  updatedKitchens   Kitchens[]   @relation("UpdatedKitchens")

  createdUserMealLocations UserMealLocation[] @relation("CreatedUserMealLocation")
  updatedUserMealLocations UserMealLocation[] @relation("UpdatedUserMealLocation")

  userRole         UserRole[]
  userMeal         UserMeal[]
  userMealLocation UserMealLocation[]
}

model UserRole {
  id     Int          @id @default(autoincrement())
  userId Int
  name   UserRoleName

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedUserRole", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedUserRole", fields: [updatedBy], references: [id])

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, name], name: "user_role_userId_name_unique")
}

model UserMeal {
  id   Int      @id @default(autoincrement())
  date DateTime @db.Date

  userId            Int
  mealId            Int
  mealBoardPlanId   Int
  weeklyMealGroupId Int
  timeOfDay         TimeOfDay @default(Any)

  user            User            @relation(fields: [userId], references: [id])
  meal            Meal            @relation(fields: [mealId], references: [id])
  mealBoardPlan   MealBoardPlan   @relation(fields: [mealBoardPlanId], references: [id])
  weeklyMealGroup WeeklyMealGroup @relation(fields: [weeklyMealGroupId], references: [id])

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedUserMeal", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedUserMeal", fields: [updatedBy], references: [id])
}

model UserMealLocation {
  id           Int          @id @default(autoincrement())
  userId       Int
  timeOfDay    TimeOfDay    @default(Any)
  mealLocation MealLocation @default(InRoom)

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedUserMealLocation", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedUserMealLocation", fields: [updatedBy], references: [id])

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, timeOfDay, mealLocation], name: "user_meal_location_userId_timeOfDay_mealLocation_unique")
  @@unique([userId, timeOfDay], name: "user_meal_location_userId_timeOfDay_unique")
}

model Allergens {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  ingredients Ingredient[] @relation("IngredientAllergens")
  recipes     Recipe[]     @relation("RecipeAllergens")
  meals       Meal[]       @relation("MealAllergens")
  users       User[]       @relation("UserAllergens")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedAllergens", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedAllergens", fields: [updatedBy], references: [id])
}

model Additives {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  ingredients Ingredient[] @relation("IngredientAdditives")
  recipes     Recipe[]     @relation("RecipeAdditives")
  meals       Meal[]       @relation("MealAdditives")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedAdditives", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedAdditives", fields: [updatedBy], references: [id])
}

model Properties {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  ingredients Ingredient[] @relation("IngredientProperties")
  recipes     Recipe[]     @relation("RecipeProperties")
  meals       Meal[]       @relation("MealProperties")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedProperties", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedProperties", fields: [updatedBy], references: [id])
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  ingredients Ingredient[] @relation("IngredientCategories")
  recipes     Recipe[]     @relation("RecipeCategories")
  meals       Meal[]       @relation("MealCategories")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedCategories", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedCategories", fields: [updatedBy], references: [id])
}

model Seasons {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  ingredients Ingredient[] @relation("IngredientSeasons")
  recipes     Recipe[]     @relation("RecipeSeasons")
  meals       Meal[]       @relation("MealSeasons")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedSeasons", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedSeasons", fields: [updatedBy], references: [id])
}

model FoodForms {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  ingredients Ingredient[] @relation("IngredientFoodForms")
  recipes     Recipe[]     @relation("RecipeFoodForms")
  meals       Meal[]       @relation("MealFoodForms")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedFoodForms", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedFoodForms", fields: [updatedBy], references: [id])
}

model Kitchens {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  ingredients Ingredient[] @relation("IngredientKitchens")
  recipes     Recipe[]     @relation("RecipeKitchens")

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedKitchens", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedKitchens", fields: [updatedBy], references: [id])
}

model Ingredient {
  id Int @id @default(autoincrement())

  name          String @db.VarChar(255)
  blsIdentifier String @db.VarChar(50)

  energyKcal      Decimal @default(0) @db.Decimal(10, 2)
  energyKj        Decimal @default(0) @db.Decimal(10, 2)
  breadUnits      Decimal @default(0) @db.Decimal(10, 2)
  carbohydrates   Decimal @default(0) @db.Decimal(10, 2)
  sugars          Decimal @default(0) @db.Decimal(10, 2)
  salt            Decimal @default(0) @db.Decimal(10, 2)
  fats            Decimal @default(0) @db.Decimal(10, 2)
  saturatedFats   Decimal @default(0) @db.Decimal(10, 2)
  unsaturatedFats Decimal @default(0) @db.Decimal(10, 2)
  protein         Decimal @default(0) @db.Decimal(10, 2)

  allergens  Allergens[]  @relation("IngredientAllergens")
  additives  Additives[]  @relation("IngredientAdditives")
  properties Properties[] @relation("IngredientProperties")
  categories Categories[] @relation("IngredientCategories")
  seasons    Seasons[]    @relation("IngredientSeasons")
  foodForms  FoodForms[]  @relation("IngredientFoodForms")
  kitchens   Kitchens[]   @relation("IngredientKitchens")

  recipeIngredient RecipeIngredient[]

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedIngredient", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedIngredient", fields: [updatedBy], references: [id])
}

model Recipe {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text

  allergens  Allergens[]  @relation("RecipeAllergens")
  additives  Additives[]  @relation("RecipeAdditives")
  properties Properties[] @relation("RecipeProperties")
  categories Categories[] @relation("RecipeCategories")
  seasons    Seasons[]    @relation("RecipeSeasons")
  foodForms  FoodForms[]  @relation("RecipeFoodForms")
  kitchens   Kitchens[]   @relation("RecipeKitchens")

  recipeIngredient RecipeIngredient[]
  mealRecipe       MealRecipe[]

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedRecipe", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedRecipe", fields: [updatedBy], references: [id])
}

model RecipeIngredient {
  id           Int @id @default(autoincrement())
  recipeId     Int
  ingredientId Int

  amount Decimal @db.Decimal(10, 2)
  unit   Unit

  recipe     Recipe     @relation(fields: [recipeId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedRecipeIngredient", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedRecipeIngredient", fields: [updatedBy], references: [id])
}

model Meal {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  image       String? @db.LongText

  allergens  Allergens[]  @relation("MealAllergens")
  additives  Additives[]  @relation("MealAdditives")
  properties Properties[] @relation("MealProperties")
  categories Categories[] @relation("MealCategories")
  seasons    Seasons[]    @relation("MealSeasons")
  foodForms  FoodForms[]  @relation("MealFoodForms")

  mondayMealGroups    WeeklyMealGroup[] @relation("MondayMeal")
  tuesdayMealGroups   WeeklyMealGroup[] @relation("TuesdayMeal")
  wednesdayMealGroups WeeklyMealGroup[] @relation("WednesdayMeal")
  thursdayMealGroups  WeeklyMealGroup[] @relation("ThursdayMeal")
  fridayMealGroups    WeeklyMealGroup[] @relation("FridayMeal")
  saturdayMealGroups  WeeklyMealGroup[] @relation("SaturdayMeal")
  sundayMealGroups    WeeklyMealGroup[] @relation("SundayMeal")

  mealRecipe MealRecipe[]
  userMeal   UserMeal[]

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedMeal", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedMeal", fields: [updatedBy], references: [id])
}

model MealRecipe {
  id       Int @id @default(autoincrement())
  mealId   Int
  recipeId Int

  note String? @db.Text

  meal   Meal   @relation(fields: [mealId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedMealRecipe", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedMealRecipe", fields: [updatedBy], references: [id])
}

model MealBoardPlan {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(255)
  color String? @db.VarChar(7)

  WeeklyMealGroup WeeklyMealGroup[]
  UserMeal        UserMeal[]

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedMealBoardPlan", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedMealBoardPlan", fields: [updatedBy], references: [id])
}

model WeeklyMealGroup {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  color       String?   @db.VarChar(7)
  description String?   @db.Text
  timeOfDay   TimeOfDay @default(Any)
  year        Int
  weekOfYear  Int // ISO week numbers
  orderIndex  Int // To manage the vertical order of groups

  mealBoardPlanId Int
  mealBoardPlan   MealBoardPlan @relation(fields: [mealBoardPlanId], references: [id])

  mondayMealId    Int?
  tuesdayMealId   Int?
  wednesdayMealId Int?
  thursdayMealId  Int?
  fridayMealId    Int?
  saturdayMealId  Int?
  sundayMealId    Int?

  mondayMeal    Meal? @relation("MondayMeal", fields: [mondayMealId], references: [id])
  tuesdayMeal   Meal? @relation("TuesdayMeal", fields: [tuesdayMealId], references: [id])
  wednesdayMeal Meal? @relation("WednesdayMeal", fields: [wednesdayMealId], references: [id])
  thursdayMeal  Meal? @relation("ThursdayMeal", fields: [thursdayMealId], references: [id])
  fridayMeal    Meal? @relation("FridayMeal", fields: [fridayMealId], references: [id])
  saturdayMeal  Meal? @relation("SaturdayMeal", fields: [saturdayMealId], references: [id])
  sundayMeal    Meal? @relation("SundayMeal", fields: [sundayMealId], references: [id])

  userMeal UserMeal[]

  /// @HideField({ output: false, input: true })
  createdAt     DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  updatedBy     Int      @db.Int
  /// @HideField({ output: false, input: true })
  createdByUser User     @relation("CreatedWeeklyMealGroup", fields: [createdBy], references: [id])
  /// @HideField({ output: false, input: true })
  updatedByUser User     @relation("UpdatedWeeklyMealGroup", fields: [updatedBy], references: [id])
}

enum UserRoleName {
  ADMIN
  MOD
  USER
  GUEST
}

enum Unit {
  G
  L
  ML
  KG
}

enum TimeOfDay {
  Any // egal
  Morning // Morgen
  Forenoon // Vormittag
  Noon // Mittag
  Afternoon // Nachmittag
  Evening // Abend
  Night // Nacht
}

enum MealLocation {
  InRoom // Meals served directly in a patient's room for privacy or convenience.
  CommunalDining // A shared dining area for communal meals, promoting social interaction.
  OutdoorPatio // Outdoor meals in a patio setting, beneficial for mental health and wellness.
  TherapyGarden // An area used for therapeutic activities, where meals can be part of therapy.
  SpecialDietary // Dedicated space for patients with specific dietary needs or restrictions.
  StaffCafeteria // Exclusive dining area for staff, separate from patient dining areas.
  VisitorCafe // A café or small dining area designated for visitors and families.
  RehabilitationGym // For patients in physical therapy, small snacks or meals might be provided.
  GroupActivityRoom // Meals or snacks provided during group therapy or activities.
  QuietRoom // A quiet, distraction-free area for patients who might be overwhelmed by crowded spaces.
  NutritionCenter // A special area focused on nutritional education and cooking demonstrations.
  Poolside // For centers with aquatic therapy, light meals or snacks near the pool area.
  FamilyDining // An area where patients can have private meals with their families.
  HealingGarden // A serene garden area designated for relaxation and meals outdoors.
  OnTheGo // A designated pick-up point for patients and staff to grab meals/snacks on the move.
}
