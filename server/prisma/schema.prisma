generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                       = "node node_modules/prisma-nestjs-graphql"
  output                         = "../src/app_modules/@generated"
  // noAtomicOperations             = true
  graphqlScalars_Bytes_name      = "GraphQLUpload"
  graphqlScalars_Bytes_specifier = "graphql-upload-minimal"
}

model Token {
  id Int @id @default(autoincrement())

  token     String   @unique @db.VarChar(255)
  expiresIn DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// @HideField({ output: false, input: true })
  createdBy Int
  /// @HideField({ output: false, input: true })
  updatedBy Int

  createdByUser User @relation("CreatedToken", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedToken", fields: [updatedBy], references: [id])
}

model User {
  id Int @id @default(autoincrement())

  image    String? @db.Text
  /// @HideField({ output: true, input: true })
  password String
  username String  @unique
  email    String  @unique

  lastOnline DateTime @default(now())
  status     Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// @HideField({ output: false, input: true })
  createdBy Int?
  /// @HideField({ output: false, input: true })
  updatedBy Int?

  createdByUser User? @relation("CreatedUser", fields: [createdBy], references: [id])
  updatedByUser User? @relation("UpdatedUser", fields: [updatedBy], references: [id])

  createdToken     Token[]    @relation("CreatedToken")
  updatedToken     Token[]    @relation("UpdatedToken")
  createdUser      User[]     @relation("CreatedUser")
  updatedUser      User[]     @relation("UpdatedUser")
  createdUserRoles UserRole[] @relation("CreatedUserRole")
  updatedUserRoles UserRole[] @relation("UpdatedUserRole")

  createdIngredients     Ingredient[]     @relation("CreatedIngredient")
  updatedIngredients     Ingredient[]     @relation("UpdatedIngredient")
  createdNutritions      Nutrition[]      @relation("CreatedNutrition")
  updatedNutritions      Nutrition[]      @relation("UpdatedNutrition")
  createdMeals           Meal[]           @relation("CreatedMeal")
  updatedMeals           Meal[]           @relation("UpdatedMeal")
  createdMealSchedulers  MealSchedule[]   @relation("CreatedMealSchedule")
  updatedMealSchedulers  MealSchedule[]   @relation("UpdatedMealSchedule")
  createdMealIngredients MealIngredient[] @relation("CreatedMealIngredient")
  updatedMealIngredients MealIngredient[] @relation("UpdatedMealIngredient")
  createdMealGroups      MealGroup[]      @relation("CreatedMealGroup")
  updatedMealGroups      MealGroup[]      @relation("UpdatedMealGroup")
  createdScheduledMeals  ScheduleMeal[]  @relation("CreatedScheduledMeal")
  updatedScheduledMeals  ScheduleMeal[]  @relation("UpdatedScheduledMeal")

  UserRole UserRole[]
}

model UserRole {
  id     Int          @id @default(autoincrement())
  userId Int
  name   UserRoleName

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// @HideField({ output: false, input: true })
  createdBy Int
  /// @HideField({ output: false, input: true })
  updatedBy Int

  createdByUser User @relation("CreatedUserRole", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedUserRole", fields: [updatedBy], references: [id])

  User User @relation(fields: [userId], references: [id])

  @@unique([userId, name], name: "user_role_userId_name_unique")
}

model Ingredient {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  allergens       String?          @db.VarChar(255)
  image           String?          @db.Text
  nutritions      Nutrition[]
  mealIngredients MealIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy Int
  /// @HideField({ output: false, input: true })
  updatedBy Int

  createdByUser User @relation("CreatedIngredient", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedIngredient", fields: [updatedBy], references: [id])
}

model Nutrition {
  ingredientId  Int
  calories      Decimal    @db.Decimal(10, 2)
  protein       Decimal    @db.Decimal(10, 2)
  carbohydrates Decimal    @db.Decimal(10, 2)
  fats          Decimal    @db.Decimal(10, 2)
  fiber         Decimal    @db.Decimal(10, 2)
  ingredient    Ingredient @relation(fields: [ingredientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy Int
  /// @HideField({ output: false, input: true })
  updatedBy Int

  createdByUser User @relation("CreatedNutrition", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedNutrition", fields: [updatedBy], references: [id])

  @@unique([ingredientId])
}

model Meal {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  image       String? @db.Text

  mealIngredients MealIngredient[] // Relation to MealIngredient
  mealGroups      MealGroup[]      @relation("MealsInGroup") // Many-to-many relation to MealGroup
  scheduledMeals  ScheduleMeal[] // Relation to ScheduledMeal

  // Audit Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int      @db.Int
  updatedBy Int      @db.Int

  // Relations for user who created/updated the meal
  createdByUser User @relation("CreatedMeal", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedMeal", fields: [updatedBy], references: [id])

  @@map("Meal")
}

model MealSchedule {
  id          Int      @id @default(autoincrement())
  servingDate DateTime @unique @db.Date

  // Relations
  scheduledMeals ScheduleMeal[] // Relation to ScheduledMeal

  // Audit Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int?     @db.Int
  updatedBy Int?     @db.Int

  createdByUser User? @relation("CreatedMealSchedule", fields: [createdBy], references: [id])
  updatedByUser User? @relation("UpdatedMealSchedule", fields: [updatedBy], references: [id])

  @@map("MealSchedule")
}

model ScheduleMeal {
  id             Int  @id @default(autoincrement())
  mealScheduleId Int
  mealGroupId    Int? // Optional link to MealGroup
  mealId         Int? // Optional link to Meal

  // Relations
  mealSchedule MealSchedule @relation(fields: [mealScheduleId], references: [id])
  mealGroup    MealGroup?   @relation(fields: [mealGroupId], references: [id])
  meal         Meal?        @relation(fields: [mealId], references: [id])

  // Audit Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int      @db.Int
  updatedBy Int      @db.Int

  createdByUser User @relation("CreatedScheduledMeal", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedScheduledMeal", fields: [updatedBy], references: [id])

  @@unique([mealScheduleId, mealGroupId, mealId])
  @@map("ScheduleMeal")
}

model MealGroup {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text

  // Relations
  scheduledMeals ScheduleMeal[] // Relation to ScheduledMeal
  meals          Meal[]          @relation("MealsInGroup") // Relation to Meal

  // Audit Fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int      @db.Int
  updatedBy Int      @db.Int

  createdByUser User @relation("CreatedMealGroup", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedMealGroup", fields: [updatedBy], references: [id])

  @@map("MealGroup")
}

model MealIngredient {
  mealId       Int
  ingredientId Int
  weightGrams  Decimal    @db.Decimal(10, 2)
  meal         Meal       @relation(fields: [mealId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @HideField({ output: false, input: true })
  createdBy Int
  /// @HideField({ output: false, input: true })
  updatedBy Int

  createdByUser User @relation("CreatedMealIngredient", fields: [createdBy], references: [id])
  updatedByUser User @relation("UpdatedMealIngredient", fields: [updatedBy], references: [id])

  @@id([mealId, ingredientId])
}

enum UserRoleName {
  ADMIN
  MOD
  USER
  GUEST
}
