/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment WeeklyMealGroupFragment on WeeklyMealGroup {\n    id\n    name\n    color\n    description\n    year\n    weekOfYear\n    timeOfDay\n    orderIndex\n    mondayMeal {\n      id\n      name\n      description\n      image\n    }\n    tuesdayMeal {\n      id\n      name\n      description\n      image\n    }\n    wednesdayMeal {\n      id\n      name\n      description\n      image\n    }\n    thursdayMeal {\n      id\n      name\n      description\n      image\n    }\n    fridayMeal {\n      id\n      name\n      description\n      image\n    }\n    saturdayMeal {\n      id\n      name\n      description\n      image\n    }\n    sundayMeal {\n      id\n      name\n      description\n      image\n    }\n  }\n": types.WeeklyMealGroupFragmentFragmentDoc,
    "\n  mutation RegisterUser($data: RegisterUserInput!) {\n    registerUser(data: $data) {\n      id\n      username\n      email\n      lastOnline\n      status\n      createdAt\n      updatedAt\n      userRole {\n        id\n        name\n      }\n    }\n  }\n": types.RegisterUserDocument,
    "\n  mutation LoginUser($data: LoginUserInput!) {\n    loginUser(data: $data) {\n      id\n      username\n      email\n      lastOnline\n      status\n      createdAt\n      updatedAt\n      userRole {\n        id\n        name\n      }\n    }\n  }\n": types.LoginUserDocument,
    "\n  mutation Logout {\n    logout\n  }\n": types.LogoutDocument,
    "\n  mutation SwitchWeeklyMealGroupAdmin($data: SwitchWeeklyMealGroupInput!) {\n    switchWeeklyMealGroupAdmin(data: $data)\n  }\n": types.SwitchWeeklyMealGroupAdminDocument,
    "\n  mutation SwitchDateWeeklyMealGroupAdmin(\n    $dateFrom: String!\n    $dateTo: String!\n  ) {\n    switchDateWeeklyMealGroupAdmin(dateFrom: $dateFrom, dateTo: $dateTo)\n  }\n": types.SwitchDateWeeklyMealGroupAdminDocument,
    "\n  mutation CreateWeeklyMealGroupAdmin(\n    $data: WeeklyMealGroupUncheckedCreateInput!\n  ) {\n    createWeeklyMealGroupAdmin(data: $data) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n": types.CreateWeeklyMealGroupAdminDocument,
    "\n  mutation DeleteWeeklyMealGroupAdmin(\n    $where: WeeklyMealGroupWhereUniqueInput!\n  ) {\n    deleteWeeklyMealGroupAdmin(where: $where) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n": types.DeleteWeeklyMealGroupAdminDocument,
    "\n  mutation UpdateWeeklyMealGroupAdmin(\n    $data: WeeklyMealGroupUncheckedUpdateInput!\n    $where: WeeklyMealGroupWhereUniqueInput!\n  ) {\n    updateWeeklyMealGroupAdmin(data: $data, where: $where) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n": types.UpdateWeeklyMealGroupAdminDocument,
    "\n  mutation UploadMealImageAdmin($mealId: Int!, $file: File!) {\n    uploadMealImageAdmin(mealId: $mealId, file: $file)\n  }\n": types.UploadMealImageAdminDocument,
    "\n  mutation CreateUserMealUser($data: UserMealUncheckedCreateInput!) {\n    createUserMealUser(data: $data) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n": types.CreateUserMealUserDocument,
    "\n  mutation DeleteUserMealUser($where: UserMealWhereUniqueInput!) {\n    deleteUserMealUser(where: $where) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n": types.DeleteUserMealUserDocument,
    "\n  mutation UpdateSettingsAdmin(\n    $data: SettingsUpdateInput!\n    $where: SettingsWhereUniqueInput!\n  ) {\n    updateSettingsAdmin(data: $data, where: $where) {\n      id\n      maxEditOrderDays\n      createdAt\n      updatedAt\n      createdByUser {\n        username\n      }\n      updatedByUser {\n        username\n      }\n    }\n  }\n": types.UpdateSettingsAdminDocument,
    "\n  mutation UpdateUserAdmin(\n    $data: UserUpdateInput!\n    $where: UserWhereUniqueInput!\n  ) {\n    updateUserAdmin(data: $data, where: $where) {\n      id\n    }\n  }\n": types.UpdateUserAdminDocument,
    "\n  mutation CreateUserMealLocationAdmin(\n    $data: UserMealLocationUncheckedCreateInput!\n  ) {\n    createUserMealLocationAdmin(data: $data) {\n      id\n      userId\n      timeOfDay\n      mealLocation\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateUserMealLocationAdminDocument,
    "\n  mutation DeleteUserMealLocationAdmin(\n    $where: UserMealLocationWhereUniqueInput!\n  ) {\n    deleteUserMealLocationAdmin(where: $where) {\n      id\n      userId\n      timeOfDay\n      mealLocation\n      createdAt\n      updatedAt\n    }\n  }\n": types.DeleteUserMealLocationAdminDocument,
    "\n  query Me {\n    me {\n      id\n      firstname\n      lastname\n      username\n      email\n      userRole {\n        id\n        name\n      }\n      userMealLocation {\n        id\n        timeOfDay\n        mealLocation\n      }\n      allergens {\n        id\n        name\n      }\n    }\n  }\n": types.MeDocument,
    "\n  query GetAllMealBoardPlansUser(\n    $where: MealBoardPlanWhereInput\n    $orderBy: [MealBoardPlanOrderByWithRelationInput!]\n    $cursor: MealBoardPlanWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealBoardPlanScalarFieldEnum!]\n  ) {\n    getAllMealBoardPlansUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n      color\n    }\n  }\n": types.GetAllMealBoardPlansUserDocument,
    "\n  query GetAllWeeklyMealGroupsUser(\n    $where: WeeklyMealGroupWhereInput\n    $orderBy: [WeeklyMealGroupOrderByWithRelationInput!]\n    $cursor: WeeklyMealGroupWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [WeeklyMealGroupScalarFieldEnum!]\n  ) {\n    getAllWeeklyMealGroupsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n": types.GetAllWeeklyMealGroupsUserDocument,
    "\n  query GetAllMealsUser(\n    $where: MealWhereInput\n    $orderBy: [MealOrderByWithRelationInput!]\n    $cursor: MealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealScalarFieldEnum!]\n  ) {\n    getAllMealsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n    }\n  }\n": types.GetAllMealsUserDocument,
    "\n  query GetAllUserMealsAdmin(\n    $where: UserMealWhereInput\n    $orderBy: [UserMealOrderByWithRelationInput!]\n    $cursor: UserMealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserMealScalarFieldEnum!]\n  ) {\n    getAllUserMealsAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      mealId\n      mealBoardPlanId\n      date\n      userId\n      weeklyMealGroupId\n    }\n  }\n": types.GetAllUserMealsAdminDocument,
    "\n  query GetAllAllergensUser(\n    $where: AllergensWhereInput\n    $orderBy: [AllergensOrderByWithRelationInput!]\n    $cursor: AllergensWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [AllergensScalarFieldEnum!]\n  ) {\n    getAllAllergensUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n    }\n  }\n": types.GetAllAllergensUserDocument,
    "\n  query GetMealAdmin(\n    $where: MealWhereInput\n    $orderBy: [MealOrderByWithRelationInput!]\n    $cursor: MealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealScalarFieldEnum!]\n  ) {\n    getMealAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n      description\n      image\n      createdAt\n      updatedAt\n      allergens {\n        id\n        name\n      }\n      additives {\n        id\n        name\n      }\n      properties {\n        id\n        name\n      }\n      categories {\n        id\n        name\n      }\n      seasons {\n        id\n        name\n      }\n      foodForms {\n        id\n        name\n      }\n      mealRecipe {\n        id\n        recipe {\n          id\n          name\n          allergens {\n            id\n            name\n          }\n          additives {\n            id\n            name\n          }\n          properties {\n            id\n            name\n          }\n          categories {\n            id\n            name\n          }\n          seasons {\n            id\n            name\n          }\n          foodForms {\n            id\n            name\n          }\n          kitchens {\n            id\n            name\n          }\n          recipeIngredient {\n            id\n            amount\n            unit\n            ingredient {\n              id\n              name\n              blsIdentifier\n              energyKcal\n              energyKj\n              breadUnits\n              carbohydrates\n              sugars\n              salt\n              fats\n              unsaturatedFats\n              saturatedFats\n              protein\n              allergens {\n                id\n                name\n              }\n              additives {\n                id\n                name\n              }\n              properties {\n                id\n                name\n              }\n              categories {\n                id\n                name\n              }\n              seasons {\n                id\n                name\n              }\n              foodForms {\n                id\n                name\n              }\n              kitchens {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetMealAdminDocument,
    "\n  query GetAllUserMealsUser(\n    $where: UserMealWhereInput\n    $orderBy: [UserMealOrderByWithRelationInput!]\n    $cursor: UserMealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserMealScalarFieldEnum!]\n  ) {\n    getAllUserMealsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n": types.GetAllUserMealsUserDocument,
    "\n  query GetUserMealsGroupedCountAdmin($data: UserMealGroupedCountAdminInput!) {\n    getUserMealsGroupedCountAdmin(data: $data) {\n      date\n      meal\n      count\n    }\n  }\n": types.GetUserMealsGroupedCountAdminDocument,
    "\n  query GetSettingsAdmin(\n    $where: SettingsWhereInput\n    $orderBy: [SettingsOrderByWithRelationInput!]\n    $cursor: SettingsWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [SettingsScalarFieldEnum!]\n  ) {\n    getSettingsAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      maxEditOrderDays\n      createdAt\n      updatedAt\n      createdByUser {\n        username\n      }\n      updatedByUser {\n        username\n      }\n    }\n  }\n": types.GetSettingsAdminDocument,
    "\n  query GetSettingsUser {\n    getSettingsUser {\n      maxEditOrderDays\n    }\n  }\n": types.GetSettingsUserDocument,
    "\n  query GetUserAdmin(\n    $where: UserWhereInput\n    $orderBy: [UserOrderByWithRelationInput!]\n    $cursor: UserWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserScalarFieldEnum!]\n  ) {\n    getUserAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      firstname\n      lastname\n      username\n      email\n      userRole {\n        id\n        name\n      }\n      userMealLocation {\n        id\n        timeOfDay\n        mealLocation\n      }\n      allergens {\n        id\n        name\n      }\n    }\n  }\n": types.GetUserAdminDocument,
    "\n  query GetAllUsersAdmin(\n    $where: UserWhereInput\n    $orderBy: [UserOrderByWithRelationInput!]\n    $cursor: UserWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserScalarFieldEnum!]\n  ) {\n    getAllUsersAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      firstname\n      lastname\n      email\n      createdAt\n    }\n  }\n": types.GetAllUsersAdminDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WeeklyMealGroupFragment on WeeklyMealGroup {\n    id\n    name\n    color\n    description\n    year\n    weekOfYear\n    timeOfDay\n    orderIndex\n    mondayMeal {\n      id\n      name\n      description\n      image\n    }\n    tuesdayMeal {\n      id\n      name\n      description\n      image\n    }\n    wednesdayMeal {\n      id\n      name\n      description\n      image\n    }\n    thursdayMeal {\n      id\n      name\n      description\n      image\n    }\n    fridayMeal {\n      id\n      name\n      description\n      image\n    }\n    saturdayMeal {\n      id\n      name\n      description\n      image\n    }\n    sundayMeal {\n      id\n      name\n      description\n      image\n    }\n  }\n"): (typeof documents)["\n  fragment WeeklyMealGroupFragment on WeeklyMealGroup {\n    id\n    name\n    color\n    description\n    year\n    weekOfYear\n    timeOfDay\n    orderIndex\n    mondayMeal {\n      id\n      name\n      description\n      image\n    }\n    tuesdayMeal {\n      id\n      name\n      description\n      image\n    }\n    wednesdayMeal {\n      id\n      name\n      description\n      image\n    }\n    thursdayMeal {\n      id\n      name\n      description\n      image\n    }\n    fridayMeal {\n      id\n      name\n      description\n      image\n    }\n    saturdayMeal {\n      id\n      name\n      description\n      image\n    }\n    sundayMeal {\n      id\n      name\n      description\n      image\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RegisterUser($data: RegisterUserInput!) {\n    registerUser(data: $data) {\n      id\n      username\n      email\n      lastOnline\n      status\n      createdAt\n      updatedAt\n      userRole {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RegisterUser($data: RegisterUserInput!) {\n    registerUser(data: $data) {\n      id\n      username\n      email\n      lastOnline\n      status\n      createdAt\n      updatedAt\n      userRole {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LoginUser($data: LoginUserInput!) {\n    loginUser(data: $data) {\n      id\n      username\n      email\n      lastOnline\n      status\n      createdAt\n      updatedAt\n      userRole {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginUser($data: LoginUserInput!) {\n    loginUser(data: $data) {\n      id\n      username\n      email\n      lastOnline\n      status\n      createdAt\n      updatedAt\n      userRole {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SwitchWeeklyMealGroupAdmin($data: SwitchWeeklyMealGroupInput!) {\n    switchWeeklyMealGroupAdmin(data: $data)\n  }\n"): (typeof documents)["\n  mutation SwitchWeeklyMealGroupAdmin($data: SwitchWeeklyMealGroupInput!) {\n    switchWeeklyMealGroupAdmin(data: $data)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SwitchDateWeeklyMealGroupAdmin(\n    $dateFrom: String!\n    $dateTo: String!\n  ) {\n    switchDateWeeklyMealGroupAdmin(dateFrom: $dateFrom, dateTo: $dateTo)\n  }\n"): (typeof documents)["\n  mutation SwitchDateWeeklyMealGroupAdmin(\n    $dateFrom: String!\n    $dateTo: String!\n  ) {\n    switchDateWeeklyMealGroupAdmin(dateFrom: $dateFrom, dateTo: $dateTo)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWeeklyMealGroupAdmin(\n    $data: WeeklyMealGroupUncheckedCreateInput!\n  ) {\n    createWeeklyMealGroupAdmin(data: $data) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWeeklyMealGroupAdmin(\n    $data: WeeklyMealGroupUncheckedCreateInput!\n  ) {\n    createWeeklyMealGroupAdmin(data: $data) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteWeeklyMealGroupAdmin(\n    $where: WeeklyMealGroupWhereUniqueInput!\n  ) {\n    deleteWeeklyMealGroupAdmin(where: $where) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteWeeklyMealGroupAdmin(\n    $where: WeeklyMealGroupWhereUniqueInput!\n  ) {\n    deleteWeeklyMealGroupAdmin(where: $where) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWeeklyMealGroupAdmin(\n    $data: WeeklyMealGroupUncheckedUpdateInput!\n    $where: WeeklyMealGroupWhereUniqueInput!\n  ) {\n    updateWeeklyMealGroupAdmin(data: $data, where: $where) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWeeklyMealGroupAdmin(\n    $data: WeeklyMealGroupUncheckedUpdateInput!\n    $where: WeeklyMealGroupWhereUniqueInput!\n  ) {\n    updateWeeklyMealGroupAdmin(data: $data, where: $where) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadMealImageAdmin($mealId: Int!, $file: File!) {\n    uploadMealImageAdmin(mealId: $mealId, file: $file)\n  }\n"): (typeof documents)["\n  mutation UploadMealImageAdmin($mealId: Int!, $file: File!) {\n    uploadMealImageAdmin(mealId: $mealId, file: $file)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUserMealUser($data: UserMealUncheckedCreateInput!) {\n    createUserMealUser(data: $data) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUserMealUser($data: UserMealUncheckedCreateInput!) {\n    createUserMealUser(data: $data) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUserMealUser($where: UserMealWhereUniqueInput!) {\n    deleteUserMealUser(where: $where) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUserMealUser($where: UserMealWhereUniqueInput!) {\n    deleteUserMealUser(where: $where) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSettingsAdmin(\n    $data: SettingsUpdateInput!\n    $where: SettingsWhereUniqueInput!\n  ) {\n    updateSettingsAdmin(data: $data, where: $where) {\n      id\n      maxEditOrderDays\n      createdAt\n      updatedAt\n      createdByUser {\n        username\n      }\n      updatedByUser {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSettingsAdmin(\n    $data: SettingsUpdateInput!\n    $where: SettingsWhereUniqueInput!\n  ) {\n    updateSettingsAdmin(data: $data, where: $where) {\n      id\n      maxEditOrderDays\n      createdAt\n      updatedAt\n      createdByUser {\n        username\n      }\n      updatedByUser {\n        username\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserAdmin(\n    $data: UserUpdateInput!\n    $where: UserWhereUniqueInput!\n  ) {\n    updateUserAdmin(data: $data, where: $where) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserAdmin(\n    $data: UserUpdateInput!\n    $where: UserWhereUniqueInput!\n  ) {\n    updateUserAdmin(data: $data, where: $where) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUserMealLocationAdmin(\n    $data: UserMealLocationUncheckedCreateInput!\n  ) {\n    createUserMealLocationAdmin(data: $data) {\n      id\n      userId\n      timeOfDay\n      mealLocation\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUserMealLocationAdmin(\n    $data: UserMealLocationUncheckedCreateInput!\n  ) {\n    createUserMealLocationAdmin(data: $data) {\n      id\n      userId\n      timeOfDay\n      mealLocation\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUserMealLocationAdmin(\n    $where: UserMealLocationWhereUniqueInput!\n  ) {\n    deleteUserMealLocationAdmin(where: $where) {\n      id\n      userId\n      timeOfDay\n      mealLocation\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUserMealLocationAdmin(\n    $where: UserMealLocationWhereUniqueInput!\n  ) {\n    deleteUserMealLocationAdmin(where: $where) {\n      id\n      userId\n      timeOfDay\n      mealLocation\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    me {\n      id\n      firstname\n      lastname\n      username\n      email\n      userRole {\n        id\n        name\n      }\n      userMealLocation {\n        id\n        timeOfDay\n        mealLocation\n      }\n      allergens {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      id\n      firstname\n      lastname\n      username\n      email\n      userRole {\n        id\n        name\n      }\n      userMealLocation {\n        id\n        timeOfDay\n        mealLocation\n      }\n      allergens {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllMealBoardPlansUser(\n    $where: MealBoardPlanWhereInput\n    $orderBy: [MealBoardPlanOrderByWithRelationInput!]\n    $cursor: MealBoardPlanWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealBoardPlanScalarFieldEnum!]\n  ) {\n    getAllMealBoardPlansUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n      color\n    }\n  }\n"): (typeof documents)["\n  query GetAllMealBoardPlansUser(\n    $where: MealBoardPlanWhereInput\n    $orderBy: [MealBoardPlanOrderByWithRelationInput!]\n    $cursor: MealBoardPlanWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealBoardPlanScalarFieldEnum!]\n  ) {\n    getAllMealBoardPlansUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n      color\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllWeeklyMealGroupsUser(\n    $where: WeeklyMealGroupWhereInput\n    $orderBy: [WeeklyMealGroupOrderByWithRelationInput!]\n    $cursor: WeeklyMealGroupWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [WeeklyMealGroupScalarFieldEnum!]\n  ) {\n    getAllWeeklyMealGroupsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"): (typeof documents)["\n  query GetAllWeeklyMealGroupsUser(\n    $where: WeeklyMealGroupWhereInput\n    $orderBy: [WeeklyMealGroupOrderByWithRelationInput!]\n    $cursor: WeeklyMealGroupWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [WeeklyMealGroupScalarFieldEnum!]\n  ) {\n    getAllWeeklyMealGroupsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      ...WeeklyMealGroupFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllMealsUser(\n    $where: MealWhereInput\n    $orderBy: [MealOrderByWithRelationInput!]\n    $cursor: MealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealScalarFieldEnum!]\n  ) {\n    getAllMealsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetAllMealsUser(\n    $where: MealWhereInput\n    $orderBy: [MealOrderByWithRelationInput!]\n    $cursor: MealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealScalarFieldEnum!]\n  ) {\n    getAllMealsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllUserMealsAdmin(\n    $where: UserMealWhereInput\n    $orderBy: [UserMealOrderByWithRelationInput!]\n    $cursor: UserMealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserMealScalarFieldEnum!]\n  ) {\n    getAllUserMealsAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      mealId\n      mealBoardPlanId\n      date\n      userId\n      weeklyMealGroupId\n    }\n  }\n"): (typeof documents)["\n  query GetAllUserMealsAdmin(\n    $where: UserMealWhereInput\n    $orderBy: [UserMealOrderByWithRelationInput!]\n    $cursor: UserMealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserMealScalarFieldEnum!]\n  ) {\n    getAllUserMealsAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      mealId\n      mealBoardPlanId\n      date\n      userId\n      weeklyMealGroupId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllAllergensUser(\n    $where: AllergensWhereInput\n    $orderBy: [AllergensOrderByWithRelationInput!]\n    $cursor: AllergensWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [AllergensScalarFieldEnum!]\n  ) {\n    getAllAllergensUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetAllAllergensUser(\n    $where: AllergensWhereInput\n    $orderBy: [AllergensOrderByWithRelationInput!]\n    $cursor: AllergensWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [AllergensScalarFieldEnum!]\n  ) {\n    getAllAllergensUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMealAdmin(\n    $where: MealWhereInput\n    $orderBy: [MealOrderByWithRelationInput!]\n    $cursor: MealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealScalarFieldEnum!]\n  ) {\n    getMealAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n      description\n      image\n      createdAt\n      updatedAt\n      allergens {\n        id\n        name\n      }\n      additives {\n        id\n        name\n      }\n      properties {\n        id\n        name\n      }\n      categories {\n        id\n        name\n      }\n      seasons {\n        id\n        name\n      }\n      foodForms {\n        id\n        name\n      }\n      mealRecipe {\n        id\n        recipe {\n          id\n          name\n          allergens {\n            id\n            name\n          }\n          additives {\n            id\n            name\n          }\n          properties {\n            id\n            name\n          }\n          categories {\n            id\n            name\n          }\n          seasons {\n            id\n            name\n          }\n          foodForms {\n            id\n            name\n          }\n          kitchens {\n            id\n            name\n          }\n          recipeIngredient {\n            id\n            amount\n            unit\n            ingredient {\n              id\n              name\n              blsIdentifier\n              energyKcal\n              energyKj\n              breadUnits\n              carbohydrates\n              sugars\n              salt\n              fats\n              unsaturatedFats\n              saturatedFats\n              protein\n              allergens {\n                id\n                name\n              }\n              additives {\n                id\n                name\n              }\n              properties {\n                id\n                name\n              }\n              categories {\n                id\n                name\n              }\n              seasons {\n                id\n                name\n              }\n              foodForms {\n                id\n                name\n              }\n              kitchens {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMealAdmin(\n    $where: MealWhereInput\n    $orderBy: [MealOrderByWithRelationInput!]\n    $cursor: MealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [MealScalarFieldEnum!]\n  ) {\n    getMealAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      name\n      description\n      image\n      createdAt\n      updatedAt\n      allergens {\n        id\n        name\n      }\n      additives {\n        id\n        name\n      }\n      properties {\n        id\n        name\n      }\n      categories {\n        id\n        name\n      }\n      seasons {\n        id\n        name\n      }\n      foodForms {\n        id\n        name\n      }\n      mealRecipe {\n        id\n        recipe {\n          id\n          name\n          allergens {\n            id\n            name\n          }\n          additives {\n            id\n            name\n          }\n          properties {\n            id\n            name\n          }\n          categories {\n            id\n            name\n          }\n          seasons {\n            id\n            name\n          }\n          foodForms {\n            id\n            name\n          }\n          kitchens {\n            id\n            name\n          }\n          recipeIngredient {\n            id\n            amount\n            unit\n            ingredient {\n              id\n              name\n              blsIdentifier\n              energyKcal\n              energyKj\n              breadUnits\n              carbohydrates\n              sugars\n              salt\n              fats\n              unsaturatedFats\n              saturatedFats\n              protein\n              allergens {\n                id\n                name\n              }\n              additives {\n                id\n                name\n              }\n              properties {\n                id\n                name\n              }\n              categories {\n                id\n                name\n              }\n              seasons {\n                id\n                name\n              }\n              foodForms {\n                id\n                name\n              }\n              kitchens {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllUserMealsUser(\n    $where: UserMealWhereInput\n    $orderBy: [UserMealOrderByWithRelationInput!]\n    $cursor: UserMealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserMealScalarFieldEnum!]\n  ) {\n    getAllUserMealsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllUserMealsUser(\n    $where: UserMealWhereInput\n    $orderBy: [UserMealOrderByWithRelationInput!]\n    $cursor: UserMealWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserMealScalarFieldEnum!]\n  ) {\n    getAllUserMealsUser(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      date\n      mealId\n      mealBoardPlanId\n      weeklyMealGroupId\n      meal {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserMealsGroupedCountAdmin($data: UserMealGroupedCountAdminInput!) {\n    getUserMealsGroupedCountAdmin(data: $data) {\n      date\n      meal\n      count\n    }\n  }\n"): (typeof documents)["\n  query GetUserMealsGroupedCountAdmin($data: UserMealGroupedCountAdminInput!) {\n    getUserMealsGroupedCountAdmin(data: $data) {\n      date\n      meal\n      count\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSettingsAdmin(\n    $where: SettingsWhereInput\n    $orderBy: [SettingsOrderByWithRelationInput!]\n    $cursor: SettingsWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [SettingsScalarFieldEnum!]\n  ) {\n    getSettingsAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      maxEditOrderDays\n      createdAt\n      updatedAt\n      createdByUser {\n        username\n      }\n      updatedByUser {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSettingsAdmin(\n    $where: SettingsWhereInput\n    $orderBy: [SettingsOrderByWithRelationInput!]\n    $cursor: SettingsWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [SettingsScalarFieldEnum!]\n  ) {\n    getSettingsAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      maxEditOrderDays\n      createdAt\n      updatedAt\n      createdByUser {\n        username\n      }\n      updatedByUser {\n        username\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSettingsUser {\n    getSettingsUser {\n      maxEditOrderDays\n    }\n  }\n"): (typeof documents)["\n  query GetSettingsUser {\n    getSettingsUser {\n      maxEditOrderDays\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserAdmin(\n    $where: UserWhereInput\n    $orderBy: [UserOrderByWithRelationInput!]\n    $cursor: UserWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserScalarFieldEnum!]\n  ) {\n    getUserAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      firstname\n      lastname\n      username\n      email\n      userRole {\n        id\n        name\n      }\n      userMealLocation {\n        id\n        timeOfDay\n        mealLocation\n      }\n      allergens {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserAdmin(\n    $where: UserWhereInput\n    $orderBy: [UserOrderByWithRelationInput!]\n    $cursor: UserWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserScalarFieldEnum!]\n  ) {\n    getUserAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      firstname\n      lastname\n      username\n      email\n      userRole {\n        id\n        name\n      }\n      userMealLocation {\n        id\n        timeOfDay\n        mealLocation\n      }\n      allergens {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllUsersAdmin(\n    $where: UserWhereInput\n    $orderBy: [UserOrderByWithRelationInput!]\n    $cursor: UserWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserScalarFieldEnum!]\n  ) {\n    getAllUsersAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      firstname\n      lastname\n      email\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllUsersAdmin(\n    $where: UserWhereInput\n    $orderBy: [UserOrderByWithRelationInput!]\n    $cursor: UserWhereUniqueInput\n    $take: Int\n    $skip: Int\n    $distinct: [UserScalarFieldEnum!]\n  ) {\n    getAllUsersAdmin(\n      where: $where\n      orderBy: $orderBy\n      cursor: $cursor\n      take: $take\n      skip: $skip\n      distinct: $distinct\n    ) {\n      id\n      firstname\n      lastname\n      email\n      createdAt\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;